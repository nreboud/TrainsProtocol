#!/bin/bash
# Script to launch series of latency tests
#  - on numbermachines specified in the array numbermachines
#  - with the size listed in listsize
# The machines used are listed in hostnames
# It is also possible to specify the following parameters
#  - ntr
#  - warmup
#  - measurement
#  - cooldown
#  - sleepAfterCooldown
#  - freq
#
# Each test generates 2 or more file (depending on the number of
# participants to the protocol) named for instance
#   latency_cooldown_10_wagonMaxLength_32768_measurement_600_number_5_ntr_1_size_7000_warmup_300_concernedHost

##########################################
# Parameters of the different tests
##########################################

# List of sizes for the messages
listsize=(10 100 200 500 1000 2000 5000 10000 15000 20000)

# Warmup time in seconds
warmup=300

# Measure time in seconds
measurement=600

# Times (in seconds) related to cooldown phase
cooldown=10 # done by latency program
sleepAfterCooldown=290 # done by script program. Should be 290
# (because cooldown+sleepAfterCooldown must be 300) for real tests

# Array of hostnames on which to launch the test
# WARNING : if hostnames does not contain any localhost, then in the following ficname definition, 
#           take off final '_'$j
hostnames=('b313-01' 'b313-02' 'b313-04' 'b313-05' 'b313-06' 'b313-07' 'b313-08' 'b313-09' 'b313-10' 'b313-11' 'b313-12' 'b313-13')

# Maximum number of machines for simultaneous launch of latency code
# NB : Cannot be more than the size hostname list
numbermachines=(2 4 7 9)

# List of trains. Each cell in this array is a list of number of
# trains for each number of machines in the previous array
liststrains=([2]="1 2 3 4" [4]="1 3 4 5" [7]="1 3 7 9" [9]="1 3 7 9 11")

# Frequency of a PING message
freq="10000"

# List of maximum length for a wagon
listwagon=(8192 16384 32768 65536)

if [[ $# -eq 4 ]]; then
# if a test fail, we start again with the last parameters used.
# NB: relaunch the script with the 4 parameters from the failed test:
#       - number of participants
#       - number of trains
#       - maximum length for a wagon
#       - size of a message
    brokennumber=$1
    brokentrain=$2
    brokenwagon=$3
    brokensize=$4
    for i in ${!numbermachines[*]}; do
	if [[ ${numbermachines[$i]} == $brokennumber ]]; then
	    brokennumberindex=$i
	    break
	fi
    done
    trains=(${liststrains[$brokennumber]})
    for i in ${!trains[*]}; do
	if [[ ${trains[$i]} == $brokentrain ]]; then
	    brokentrainindex=$i
	    break
	fi
    done
    for i in ${!listwagon[*]}; do
	if [[ ${listwagon[$i]} == $brokenwagon ]]; then
	    brokenwagonindex=$i
	    break
	fi
    done
    for i in ${!listsize[*]}; do
	if [[ ${listsize[$i]} == $brokensize ]]; then
	    brokensizeindex=$i
	    break
	fi
    done
    numbermachines=(${numbermachines[*]:$brokennumberindex})
fi
##########################################
# Let's go for the different tests
##########################################

for i in ${!numbermachines[*]}; do
    echo "####### Number of machines: ${numbermachines[$i]}"
    if [[ ${numbermachines[$i]} -eq $brokennumber ]]; then
	tmptrains=(${liststrains[${numbermachines[$i]}]})
	liststrains[${numbermachines[$i]}]=${tmptrains[*]:$brokentrainindex}
    fi
    for ntr in ${liststrains[${numbermachines[$i]}]};do
	echo "##### Number of trains: $ntr"
	if [[ ${numbermachines[$i]} -eq $brokennumber && $ntr -eq $brokentrain ]]; then
	    tmpwagons=(${listwagon[*]})
	    listwagon=(${tmpwagons[*]:$brokenwagonindex})
	fi
	for length in ${listwagon[*]}; do
	    if [[ ${numbermachines[$i]} -eq $brokennumber && $ntr -eq $brokentrain ]]; then
		listwagon=(${tmpwagons[*]})
	    fi
	    echo "# Length of a wagon: $length"
	    if [[ ${numbermachines[$i]} -eq $brokennumber && $ntr -eq $brokentrain && $length -eq $brokenwagon ]]; then
		tmpsizes=(${listsize[*]})
		listsize=(${tmpsizes[*]:$brokensizeindex})
	    fi
	    for size in ${listsize[*]}; do
		echo "### Size of a message: $size"
		if [[ ${numbermachines[$i]} -eq $brokennumber && $ntr -eq $brokentrain && $length -eq $brokenwagon ]]; then
		    listsize=(${tmpsizes[*]})
		fi
		# We build the different ssh commands to be lauched for this iteration
		cmd=()
		latencydir="TrainsProtocol/tests/integration/latency/"
		opt="-b ${numbermachines[$i]} -c $cooldown -f $freq -l $length -m $measurement -n ${numbermachines[$i]} -s $size -t $ntr -w $warmup"
		for ((j=0;j<${numbermachines[$i]};j++)); do
		    ficname='latency_cooldown'_$cooldown'_wagonMaxLength_'$length'_measurement_'$measurement'_number_'${numbermachines[$i]}'_ntr_'$ntr'_size_'$size'_warmup_'$warmup'_'${hostnames[$j]}'_'$j
		    dist="\"who > ~/who-dir/$ficname ; cd $latencydir ; ./latency $opt > ~/results/$ficname\""
		    cmd[${#cmd[*]}]="ssh ${hostnames[$j]} $dist"
		done #j
		# we launch the test in background for the first numbermachines-1 participants
		for((k=0;k<${#cmd[*]}-1;k++)); do
		    echo "${cmd[$k]}"
		    eval "${cmd[$k]} &"
		    sleep 1
		done #k
		# we launch the test in foreground for the last participant
		echo -e "${cmd[${#cmd[*]}-1]}\n"
		eval "${cmd[${#cmd[*]}-1]}"
		# we do the sleep after cooldown
		sleep $sleaepAfterCooldown;
	    done #size
	done #length
    done #ntr
done #i